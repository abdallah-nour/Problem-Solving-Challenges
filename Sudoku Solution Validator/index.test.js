const { assert } = require("chai");
const validSolution = require("./index");

const validSudoku = [
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 5, 3, 4, 8],
  [1, 9, 8, 3, 4, 2, 5, 6, 7],
  [8, 5, 9, 7, 6, 1, 4, 2, 3],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 6, 1, 5, 3, 7, 2, 8, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 4, 5, 2, 8, 6, 1, 7, 9]
];
const inValidSudoku = [
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 0, 3, 4, 8],
  [1, 0, 0, 3, 4, 2, 5, 6, 0],
  [8, 5, 9, 7, 6, 1, 0, 2, 0],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 0, 1, 5, 3, 7, 2, 1, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 0, 0, 4, 8, 1, 1, 7, 9]
];

describe("Sudoku Solution Validator", () => {
  it("Valid Sudoku", () => {
    assert.strictEqual(validSolution(validSudoku), true);
  });

  it("Invalid Sudoku", () => {
    assert.strictEqual(validSolution(inValidSudoku), false);
  });

  it("Random Tests", () => {
    Array.prototype.shuffle = function () {
      let ran1, ran2, tmp;
      for (let i = 0; i < this.length * 2; i++) {
        ran1 = Math.floor(Math.random() * this.length);
        ran2 = Math.floor(Math.random() * this.length);

        tmp = this[ran1]
        this[ran1] = this[ran2];
        this[ran2] = tmp;
      }
      return this;
    }
    let tests = [
      [
        [[5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9]],
        true
      ],
      [
        [[5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 0, 3, 4, 8],
        [1, 0, 0, 3, 4, 2, 5, 6, 0],
        [8, 5, 9, 7, 6, 1, 0, 2, 0],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 0, 1, 5, 3, 7, 2, 1, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 0, 0, 4, 8, 1, 1, 7, 9]],
        false
      ],
      [
        [[1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        false
      ],
      [
        [[8, 2, 6, 3, 4, 7, 5, 9, 1],
        [7, 3, 5, 8, 1, 9, 6, 4, 2],
        [1, 9, 4, 2, 6, 5, 8, 7, 3],
        [3, 1, 7, 5, 8, 4, 2, 6, 9],
        [6, 5, 9, 1, 7, 2, 4, 3, 8],
        [4, 8, 2, 9, 3, 6, 7, 1, 5],
        [9, 4, 8, 7, 5, 1, 3, 2, 6],
        [5, 6, 1, 4, 2, 3, 9, 8, 7],
        [2, 7, 3, 6, 9, 8, 1, 5, 4]],
        true
      ],
      [
        [[1, 2, 6, 3, 4, 7, 5, 9, 8],
        [7, 3, 5, 8, 1, 9, 6, 4, 2],
        [1, 9, 4, 2, 7, 5, 8, 6, 3],
        [3, 1, 7, 5, 8, 4, 2, 6, 9],
        [7, 5, 9, 1, 6, 2, 4, 3, 8],
        [4, 8, 2, 9, 3, 6, 7, 1, 5],
        [1, 4, 8, 7, 5, 9, 3, 2, 6],
        [5, 6, 1, 4, 2, 3, 9, 8, 7],
        [2, 7, 3, 6, 9, 1, 8, 5, 4]],
        false
      ],
      [
        [[1, 2, 3, 4, 5, 6, 7, 8, 9],
        [2, 3, 1, 5, 6, 4, 8, 9, 7],
        [3, 1, 2, 6, 4, 5, 9, 7, 8],
        [4, 5, 6, 7, 8, 9, 1, 2, 3],
        [5, 6, 4, 8, 9, 7, 2, 3, 1],
        [6, 4, 5, 9, 7, 8, 3, 1, 2],
        [7, 8, 9, 1, 2, 3, 4, 5, 6],
        [8, 9, 7, 2, 3, 1, 5, 6, 4],
        [9, 7, 8, 3, 1, 2, 6, 4, 5]],
        false
      ]
    ];
    tests = tests.shuffle();
    for (let i = 0; i < tests.length; i++) {
      assert.strictEqual(validSolution(tests[i][0]), tests[i][1],
        "Expected '" + tests[i][1] + "' on input of <pre>" +
        tests[i][0].map(function (e) { return e.join(' '); }).join('\n')
        + "</pre>");
    }
  });

});
